{"version":3,"file":"secure-storage.mjs","sources":["../src/enums/EncodingType.ts","../src/helpers/generateSecretKey.ts","../src/SecureStorageFactory.ts","../src/index.ts"],"sourcesContent":["export enum EncodingType {\r\n    AES = 'aes',\r\n    DES = 'des',\r\n    TDES = 'tdes',\r\n    Rabbit = 'rabbit',\r\n    RC4 = 'rc4',\r\n}\r\n","import CryptoES from 'crypto-es';\r\nimport { IKeySaltPair } from '../interfaces/IKeySaltPair';\r\n\r\nconst _generateSecretKey = (secretPhrase: string, salt: CryptoES.lib.WordArray) => {\r\n    const key128Bits = CryptoES.PBKDF2(secretPhrase, salt, { keySize: 128 / 32 });\r\n    return key128Bits?.toString();\r\n};\r\n\r\nexport const generateSecretKeyWithSalt = (secretPhrase: string, saltAsHex?: string): IKeySaltPair => {\r\n    let salt = CryptoES.lib.WordArray.random(128 / 8);\r\n    if (saltAsHex) {\r\n        salt = CryptoES.enc.Hex.parse(saltAsHex);\r\n    }\r\n\r\n    const key128Bits = _generateSecretKey(secretPhrase, salt);\r\n    return { key: key128Bits, salt: salt.toString(CryptoES.enc.Hex) };\r\n};\r\n\r\nexport const generateSecretKey = (secretPhrase: string) => {\r\n    return generateSecretKeyWithSalt(secretPhrase);\r\n};\r\n","import FingerprintJS from '@fingerprintjs/fingerprintjs';\r\nimport CryptoES from 'crypto-es';\r\nimport Cookies from 'js-cookie';\r\nimport { EncodingType } from './enums/EncodingType';\r\nimport { generateSecretKey, generateSecretKeyWithSalt } from './helpers/generateSecretKey';\r\nimport { IEncryptionConfig } from './interfaces/IEncryptionConfig';\r\nimport { IKeySaltPair } from './interfaces/IKeySaltPair';\r\nimport { ISecureStorage } from './interfaces/ISecureStorage';\r\nimport { ISecureStorageConfig } from './interfaces/ISecureStorageConfig';\r\nimport { ISecureStorageConfigBase } from './interfaces/ISecureStorageConfigBase';\r\nimport { ISecureStorageFactory } from './interfaces/ISecureStorageFactory';\r\n\r\nclass SecureStorage {\r\n    private static browserFingerPrint?: string;\r\n    private _encrypt = CryptoES.AES.encrypt;\r\n    private _decrypt = CryptoES.AES.decrypt;\r\n    private _isInitialized = false;\r\n    private _storage: Storage = window?.localStorage ?? localStorage;\r\n    private _encryptionSecret: IEncryptionConfig = {\r\n        expires: 90,\r\n    };\r\n\r\n    config: ISecureStorageConfigBase = {\r\n        encodingType: EncodingType.AES,\r\n        storageNamespace: 'secure',\r\n    };\r\n\r\n    constructor(config: Partial<ISecureStorageConfig>) {\r\n        this.setConfig(config);\r\n        this.setCryptoMethods();\r\n    }\r\n\r\n    initAsync = async () => {\r\n        if (this._encryptionSecret.key !== undefined) {\r\n            this._isInitialized = true;\r\n            return;\r\n        }\r\n\r\n        if (!SecureStorage.browserFingerPrint) {\r\n            const fp = await FingerprintJS.load();\r\n            const result = await fp.get();\r\n            SecureStorage.browserFingerPrint = result.visitorId;\r\n            Object.freeze(SecureStorage.browserFingerPrint);\r\n        }\r\n\r\n        const salt = this.getSaltOrDefaultFromSecurePlace();\r\n        this.setEncryptionSecret(salt);\r\n        this._isInitialized = true;\r\n    };\r\n\r\n    clear = () => {\r\n        for (let index = 0; index < this._storage.length; index++) {\r\n            const key = this._storage.key(index);\r\n            if (key?.startsWith(`${this.config.storageNamespace}.`)) {\r\n                this._storage.removeItem(key);\r\n            }\r\n        }\r\n    };\r\n\r\n    getItem = <T>(key: string): T | null => {\r\n        this.throwIfNotInitialized();\r\n\r\n        key = this.getNamespaceKey(key);\r\n        const encodedItem = this._storage.getItem(key);\r\n        if (encodedItem === null) {\r\n            return null;\r\n        }\r\n\r\n        const decryptedValue = this._decrypt(encodedItem, this._encryptionSecret.key);\r\n        const strValue = decryptedValue.toString(CryptoES.enc.Utf8);\r\n        try {\r\n            return JSON.parse(strValue);\r\n        } catch (e) {\r\n            return strValue as unknown as T;\r\n        }\r\n    };\r\n\r\n    removeItem = (key: string): void => {\r\n        key = this.getNamespaceKey(key);\r\n        this._storage.removeItem(key);\r\n    };\r\n\r\n    setItem = <T>(key: string, value: T): void => {\r\n        this.throwIfNotInitialized();\r\n\r\n        key = this.getNamespaceKey(key);\r\n        let strValue = value as unknown as string;\r\n        if (typeof value !== 'string') {\r\n            strValue = JSON.stringify(value);\r\n        }\r\n\r\n        const encryptedValue = this._encrypt(strValue, this._encryptionSecret.key);\r\n        this._storage.setItem(key, encryptedValue.toString());\r\n    };\r\n\r\n    private get metaKey() {\r\n        return `${this.config.storageNamespace}_metaKey`;\r\n    }\r\n\r\n    private getNamespaceKey = (key: string) => {\r\n        this.throwIfKeyIsUndefined(key);\r\n        return `${this.config.storageNamespace}.${key}`;\r\n    };\r\n\r\n    private throwIfNotInitialized() {\r\n        if (!this._isInitialized) {\r\n            throw new Error('Secure Storage: Is not initialized.');\r\n        }\r\n    }\r\n\r\n    private throwIfKeyIsUndefined(key: string) {\r\n        if (!key) {\r\n            throw new Error('Secure Storage: a key must be provided.');\r\n        }\r\n    }\r\n\r\n    private setEncryptionSecret(salt: string | undefined) {\r\n        if (!SecureStorage.browserFingerPrint) {\r\n            throw new Error('Secure Storage: Browser finger print is not set.');\r\n        }\r\n\r\n        if (!salt) {\r\n            const secret = generateSecretKey(SecureStorage.browserFingerPrint);\r\n            this.setSaltToSecurePlace(secret);\r\n            this._encryptionSecret.key = secret.key;\r\n            Object.freeze(this._encryptionSecret);\r\n            return;\r\n        }\r\n\r\n        this._encryptionSecret.key = generateSecretKeyWithSalt(SecureStorage.browserFingerPrint, salt).key;\r\n        Object.freeze(this._encryptionSecret);\r\n    }\r\n\r\n    private setSaltToSecurePlace(secret: { key: string; salt: string }) {\r\n        Cookies.set(this.metaKey, secret.salt, {\r\n            secure: true,\r\n            sameSite: 'Strict',\r\n            expires: this._encryptionSecret.expires,\r\n        });\r\n    }\r\n\r\n    private getSaltOrDefaultFromSecurePlace() {\r\n        return Cookies.get(this.metaKey);\r\n    }\r\n\r\n    private setConfig(config: Partial<ISecureStorageConfig>) {\r\n        this.config.encodingType = config?.encodingType ?? this.config.encodingType;\r\n        this.config.storageNamespace = config?.storageNamespace ?? this.config.storageNamespace;\r\n        this.setConfigSecret(config);\r\n    }\r\n\r\n    private setConfigSecret(config: Partial<ISecureStorageConfig>) {\r\n        if (config?.encryptionSecret !== undefined) {\r\n            this._encryptionSecret = config.encryptionSecret;\r\n            if (this._encryptionSecret.key) {\r\n                Object.freeze(this._encryptionSecret);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setCryptoMethods() {\r\n        switch (this.config.encodingType) {\r\n            case EncodingType.TDES:\r\n                this._encrypt = CryptoES.TripleDES.encrypt;\r\n                this._decrypt = CryptoES.TripleDES.decrypt;\r\n                break;\r\n            case EncodingType.DES:\r\n                this._encrypt = CryptoES.DES.encrypt;\r\n                this._decrypt = CryptoES.DES.decrypt;\r\n                break;\r\n            case EncodingType.Rabbit:\r\n                this._encrypt = CryptoES.Rabbit.encrypt;\r\n                this._decrypt = CryptoES.Rabbit.decrypt;\r\n                break;\r\n            case EncodingType.RC4:\r\n                this._encrypt = CryptoES.RC4.encrypt;\r\n                this._decrypt = CryptoES.RC4.decrypt;\r\n                break;\r\n            case EncodingType.AES:\r\n                this._encrypt = CryptoES.AES.encrypt;\r\n                this._decrypt = CryptoES.AES.decrypt;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default class SecureStorageFactory implements ISecureStorageFactory {\r\n    generateSecretKeyWithSalt: (secretPhrase: string, saltAsHex?: string) => IKeySaltPair = generateSecretKeyWithSalt;\r\n    async createAsync(config: Partial<ISecureStorageConfig>): Promise<ISecureStorage> {\r\n        const secureStorage = new SecureStorage(config);\r\n        await secureStorage.initAsync();\r\n        return {\r\n            clear: secureStorage.clear,\r\n            setItem: secureStorage.setItem,\r\n            getItem: secureStorage.getItem,\r\n            removeItem: secureStorage.removeItem,\r\n        };\r\n    }\r\n}\r\n","import SecureStorageFactory from './SecureStorageFactory';\r\nexport const SecureStorage = new SecureStorageFactory();\r\n"],"names":["EncodingType","generateSecretKeyWithSalt","secretPhrase","saltAsHex","salt","CryptoES","lib","WordArray","random","enc","Hex","parse","key128Bits","PBKDF2","keySize","toString","_generateSecretKey","key","SecureStorage","constructor","config","this","AES","encrypt","decrypt","window","localStorage","expires","encodingType","storageNamespace","async","undefined","_encryptionSecret","_isInitialized","browserFingerPrint","fp","FingerprintJS","load","result","get","visitorId","Object","freeze","getSaltOrDefaultFromSecurePlace","setEncryptionSecret","index","_storage","length","startsWith","removeItem","throwIfNotInitialized","getNamespaceKey","encodedItem","getItem","strValue","_decrypt","Utf8","JSON","e","value","stringify","encryptedValue","_encrypt","setItem","throwIfKeyIsUndefined","setConfig","setCryptoMethods","metaKey","Error","secret","setSaltToSecurePlace","Cookies","set","secure","sameSite","setConfigSecret","encryptionSecret","TDES","TripleDES","DES","Rabbit","RC4","secureStorage","initAsync","clear"],"mappings":"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"}
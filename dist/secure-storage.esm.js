import e from"@fingerprintjs/fingerprintjs";import t from"crypto-es";import r from"js-cookie";var i;!function(e){e.AES="aes",e.DES="des",e.TDES="tdes",e.Rabbit="rabbit",e.RC4="rc4"}(i||(i={}));const s=(e,r)=>{let i=t.lib.WordArray.random(16);r&&(i=t.enc.Hex.parse(r));return{key:n(e,i),salt:i.toString(t.enc.Hex)}},n=(e,r)=>t.PBKDF2(e,r,{keySize:4})?.toString();class c{static browserFingerPrint;_encrypt=t.AES.encrypt;_decrypt=t.AES.decrypt;_isInitialized=!1;_storage=window?.localStorage??localStorage;_encryptionSecret;config={encodingType:i.AES,storageNamespace:"secure"};constructor(e){this.setConfig(e),this.setCryptoMethods()}initAsync=async()=>{if(void 0!==this._encryptionSecret)return void(this._isInitialized=!0);if(!c.browserFingerPrint){const t=await e.load(),r=await t.get();c.browserFingerPrint=r.visitorId,Object.freeze(c.browserFingerPrint)}const t=this.getSaltOrDefaultFromSecurePlace();this.setEncryptionSecret(t),this._isInitialized=!0};clear=()=>{for(let e=0;e<this._storage.length;e++){const t=this._storage.key(e);t?.startsWith(`${this.config.storageNamespace}.`)&&this._storage.removeItem(t)}};getItem=e=>{this.throwIfNotInitialized(),e=this.getNamespaceKey(e);const r=this._storage.getItem(e);if(null===r)return null;const i=this._decrypt(r,this._encryptionSecret).toString(t.enc.Utf8);try{return JSON.parse(i)}catch(e){return i}};removeItem=e=>{e=this.getNamespaceKey(e),this._storage.removeItem(e)};setItem=(e,t)=>{this.throwIfNotInitialized(),e=this.getNamespaceKey(e);let r=t;"string"!=typeof t&&(r=JSON.stringify(t));const i=this._encrypt(r,this._encryptionSecret);this._storage.setItem(e,i.toString())};get metaKey(){return`${this.config.storageNamespace}_metaKey`}getNamespaceKey=e=>(this.throwIfKeyIsUndefined(e),`${this.config.storageNamespace}.${e}`);throwIfNotInitialized(){if(!this._isInitialized)throw new Error("Secure Storage: Is not initialized.")}throwIfKeyIsUndefined(e){if(!e)throw new Error("Secure Storage: a key must be provided.")}setEncryptionSecret(e){if(!c.browserFingerPrint)throw new Error("Secure Storage: Browser finger print is not set.");if(!e){const e=(t=c.browserFingerPrint,s(t));return this.setSaltToSecurePlace(e),this._encryptionSecret=e.key,void Object.freeze(this._encryptionSecret)}var t;this._encryptionSecret=s(c.browserFingerPrint,e).key,Object.freeze(this._encryptionSecret)}setSaltToSecurePlace(e){r.set(this.metaKey,e.salt,{secure:!0,sameSite:"Strict"})}getSaltOrDefaultFromSecurePlace(){return r.get(this.metaKey)}setConfig(e){this.config.encodingType=e?.encodingType??this.config.encodingType,this.config.storageNamespace=e?.storageNamespace??this.config.storageNamespace,void 0!==e?.encryptionSecret&&(this._encryptionSecret=e.encryptionSecret,Object.freeze(this._encryptionSecret))}setCryptoMethods(){switch(this.config.encodingType){case i.TDES:this._encrypt=t.TripleDES.encrypt,this._decrypt=t.TripleDES.decrypt;break;case i.DES:this._encrypt=t.DES.encrypt,this._decrypt=t.DES.decrypt;break;case i.Rabbit:this._encrypt=t.Rabbit.encrypt,this._decrypt=t.Rabbit.decrypt;break;case i.RC4:this._encrypt=t.RC4.encrypt,this._decrypt=t.RC4.decrypt;break;case i.AES:this._encrypt=t.AES.encrypt,this._decrypt=t.AES.decrypt}}}class o{static async createAsync(e){const t=new c(e);return await t.initAsync(),{clear:t.clear,setItem:t.setItem,getItem:t.getItem,removeItem:t.removeItem}}}export{o as default};

{"version":3,"file":"secure-storage.umd.js","sources":["../src/enums/EncodingType.ts","../src/helpers/generateSecretKey.ts","../src/SecureStorageFactory.ts","../src/index.ts"],"sourcesContent":["export enum EncodingType {\r\n    AES = 'aes',\r\n    DES = 'des',\r\n    TDES = 'tdes',\r\n    Rabbit = 'rabbit',\r\n    RC4 = 'rc4',\r\n}\r\n","import CryptoES from 'crypto-es';\r\nimport { IKeySaltPair } from 'src/interfaces/IKeySaltPair';\r\n\r\nconst _generateSecretKey = (secretPhrase: string, salt: CryptoES.lib.WordArray) => {\r\n    const key128Bits = CryptoES.PBKDF2(secretPhrase, salt, { keySize: 128 / 32 });\r\n    return key128Bits?.toString();\r\n};\r\n\r\nexport const generateSecretKeyWithSalt = (secretPhrase: string, saltAsHex?: string): IKeySaltPair => {\r\n    let salt = CryptoES.lib.WordArray.random(128 / 8);\r\n    if (saltAsHex) {\r\n        salt = CryptoES.enc.Hex.parse(saltAsHex);\r\n    }\r\n\r\n    const key128Bits = _generateSecretKey(secretPhrase, salt);\r\n    return { key: key128Bits, salt: salt.toString(CryptoES.enc.Hex) };\r\n};\r\n\r\nexport const generateSecretKey = (secretPhrase: string) => {\r\n    return generateSecretKeyWithSalt(secretPhrase);\r\n};\r\n","import FingerprintJS from '@fingerprintjs/fingerprintjs';\r\nimport CryptoES from 'crypto-es';\r\nimport Cookies from 'js-cookie';\r\nimport { EncodingType } from './enums/EncodingType';\r\nimport { generateSecretKey, generateSecretKeyWithSalt } from './helpers/generateSecretKey';\r\nimport { IEncryptionConfig } from './interfaces/IEncryptionConfig';\r\nimport { IKeySaltPair } from './interfaces/IKeySaltPair';\r\nimport { ISecureStorage } from './interfaces/ISecureStorage';\r\nimport { ISecureStorageConfig } from './interfaces/ISecureStorageConfig';\r\nimport { ISecureStorageConfigBase } from './interfaces/ISecureStorageConfigBase';\r\nimport { ISecureStorageFactory } from './interfaces/ISecureStorageFactory';\r\n\r\nclass SecureStorage {\r\n    private static browserFingerPrint?: string;\r\n    private _encrypt = CryptoES.AES.encrypt;\r\n    private _decrypt = CryptoES.AES.decrypt;\r\n    private _isInitialized = false;\r\n    private _storage: Storage = window?.localStorage ?? localStorage;\r\n    private _encryptionSecret: IEncryptionConfig = {\r\n        expires: 90,\r\n    };\r\n\r\n    config: ISecureStorageConfigBase = {\r\n        encodingType: EncodingType.AES,\r\n        storageNamespace: 'secure',\r\n    };\r\n\r\n    constructor(config: Partial<ISecureStorageConfig>) {\r\n        this.setConfig(config);\r\n        this.setCryptoMethods();\r\n    }\r\n\r\n    initAsync = async () => {\r\n        if (this._encryptionSecret.key !== undefined) {\r\n            this._isInitialized = true;\r\n            return;\r\n        }\r\n\r\n        if (!SecureStorage.browserFingerPrint) {\r\n            const fp = await FingerprintJS.load();\r\n            const result = await fp.get();\r\n            SecureStorage.browserFingerPrint = result.visitorId;\r\n            Object.freeze(SecureStorage.browserFingerPrint);\r\n        }\r\n\r\n        const salt = this.getSaltOrDefaultFromSecurePlace();\r\n        this.setEncryptionSecret(salt);\r\n        this._isInitialized = true;\r\n    };\r\n\r\n    clear = () => {\r\n        for (let index = 0; index < this._storage.length; index++) {\r\n            const key = this._storage.key(index);\r\n            if (key?.startsWith(`${this.config.storageNamespace}.`)) {\r\n                this._storage.removeItem(key);\r\n            }\r\n        }\r\n    };\r\n\r\n    getItem = <T>(key: string): T | null => {\r\n        this.throwIfNotInitialized();\r\n\r\n        key = this.getNamespaceKey(key);\r\n        const encodedItem = this._storage.getItem(key);\r\n        if (encodedItem === null) {\r\n            return null;\r\n        }\r\n\r\n        const decryptedValue = this._decrypt(encodedItem, this._encryptionSecret.key);\r\n        const strValue = decryptedValue.toString(CryptoES.enc.Utf8);\r\n        try {\r\n            return JSON.parse(strValue);\r\n        } catch (e) {\r\n            return strValue as unknown as T;\r\n        }\r\n    };\r\n\r\n    removeItem = (key: string): void => {\r\n        key = this.getNamespaceKey(key);\r\n        this._storage.removeItem(key);\r\n    };\r\n\r\n    setItem = <T>(key: string, value: T): void => {\r\n        this.throwIfNotInitialized();\r\n\r\n        key = this.getNamespaceKey(key);\r\n        let strValue = value as unknown as string;\r\n        if (typeof value !== 'string') {\r\n            strValue = JSON.stringify(value);\r\n        }\r\n\r\n        const encryptedValue = this._encrypt(strValue, this._encryptionSecret.key);\r\n        this._storage.setItem(key, encryptedValue.toString());\r\n    };\r\n\r\n    private get metaKey() {\r\n        return `${this.config.storageNamespace}_metaKey`;\r\n    }\r\n\r\n    private getNamespaceKey = (key: string) => {\r\n        this.throwIfKeyIsUndefined(key);\r\n        return `${this.config.storageNamespace}.${key}`;\r\n    };\r\n\r\n    private throwIfNotInitialized() {\r\n        if (!this._isInitialized) {\r\n            throw new Error('Secure Storage: Is not initialized.');\r\n        }\r\n    }\r\n\r\n    private throwIfKeyIsUndefined(key: string) {\r\n        if (!key) {\r\n            throw new Error('Secure Storage: a key must be provided.');\r\n        }\r\n    }\r\n\r\n    private setEncryptionSecret(salt: string | undefined) {\r\n        if (!SecureStorage.browserFingerPrint) {\r\n            throw new Error('Secure Storage: Browser finger print is not set.');\r\n        }\r\n\r\n        if (!salt) {\r\n            const secret = generateSecretKey(SecureStorage.browserFingerPrint);\r\n            this.setSaltToSecurePlace(secret);\r\n            this._encryptionSecret.key = secret.key;\r\n            Object.freeze(this._encryptionSecret);\r\n            return;\r\n        }\r\n\r\n        this._encryptionSecret.key = generateSecretKeyWithSalt(SecureStorage.browserFingerPrint, salt).key;\r\n        Object.freeze(this._encryptionSecret);\r\n    }\r\n\r\n    private setSaltToSecurePlace(secret: { key: string; salt: string }) {\r\n        Cookies.set(this.metaKey, secret.salt, {\r\n            secure: true,\r\n            sameSite: 'Strict',\r\n            expires: this._encryptionSecret.expires,\r\n        });\r\n    }\r\n\r\n    private getSaltOrDefaultFromSecurePlace() {\r\n        return Cookies.get(this.metaKey);\r\n    }\r\n\r\n    private setConfig(config: Partial<ISecureStorageConfig>) {\r\n        this.config.encodingType = config?.encodingType ?? this.config.encodingType;\r\n        this.config.storageNamespace = config?.storageNamespace ?? this.config.storageNamespace;\r\n        this.setConfigSecret(config);\r\n    }\r\n\r\n    private setConfigSecret(config: Partial<ISecureStorageConfig>) {\r\n        if (config?.encryptionSecret !== undefined) {\r\n            this._encryptionSecret = config.encryptionSecret;\r\n            if (this._encryptionSecret.key) {\r\n                Object.freeze(this._encryptionSecret);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setCryptoMethods() {\r\n        switch (this.config.encodingType) {\r\n            case EncodingType.TDES:\r\n                this._encrypt = CryptoES.TripleDES.encrypt;\r\n                this._decrypt = CryptoES.TripleDES.decrypt;\r\n                break;\r\n            case EncodingType.DES:\r\n                this._encrypt = CryptoES.DES.encrypt;\r\n                this._decrypt = CryptoES.DES.decrypt;\r\n                break;\r\n            case EncodingType.Rabbit:\r\n                this._encrypt = CryptoES.Rabbit.encrypt;\r\n                this._decrypt = CryptoES.Rabbit.decrypt;\r\n                break;\r\n            case EncodingType.RC4:\r\n                this._encrypt = CryptoES.RC4.encrypt;\r\n                this._decrypt = CryptoES.RC4.decrypt;\r\n                break;\r\n            case EncodingType.AES:\r\n                this._encrypt = CryptoES.AES.encrypt;\r\n                this._decrypt = CryptoES.AES.decrypt;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default class SecureStorageFactory implements ISecureStorageFactory {\r\n    generateSecretKeyWithSalt: (secretPhrase: string, saltAsHex?: string) => IKeySaltPair = generateSecretKeyWithSalt;\r\n    async createAsync(config: Partial<ISecureStorageConfig>): Promise<ISecureStorage> {\r\n        const secureStorage = new SecureStorage(config);\r\n        await secureStorage.initAsync();\r\n        return {\r\n            clear: secureStorage.clear,\r\n            setItem: secureStorage.setItem,\r\n            getItem: secureStorage.getItem,\r\n            removeItem: secureStorage.removeItem,\r\n        };\r\n    }\r\n}\r\n","import SecureStorageFactory from './SecureStorageFactory';\r\n\r\nexport const SecureStorage = new SecureStorageFactory();\r\n"],"names":["EncodingType","generateSecretKeyWithSalt","secretPhrase","saltAsHex","salt","CryptoES","lib","WordArray","random","enc","Hex","parse","key128Bits","PBKDF2","keySize","toString","_generateSecretKey","key","SecureStorage","static","_encrypt","AES","encrypt","_decrypt","decrypt","_isInitialized","_storage","window","localStorage","_encryptionSecret","expires","config","encodingType","storageNamespace","constructor","this","setConfig","setCryptoMethods","initAsync","async","undefined","browserFingerPrint","fp","FingerprintJS","load","result","get","visitorId","Object","freeze","getSaltOrDefaultFromSecurePlace","setEncryptionSecret","clear","index","length","startsWith","removeItem","getItem","throwIfNotInitialized","getNamespaceKey","encodedItem","strValue","Utf8","JSON","e","setItem","value","stringify","encryptedValue","metaKey","throwIfKeyIsUndefined","Error","secret","setSaltToSecurePlace","Cookies","set","secure","sameSite","setConfigSecret","encryptionSecret","TDES","TripleDES","DES","Rabbit","RC4","secureStorage"],"mappings":"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"}